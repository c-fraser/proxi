/*
Copyright 2022 c-fraser

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by https://github.com/Kotlin/kotlinx-knit. DO NOT EDIT.
package io.github.cfraser.proxi.knit

import io.github.cfraser.proxi.Server
import io.github.cfraser.proxi.ServerTest.Companion.inFile
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.Response
import okhttp3.tls.HandshakeCertificates
import okhttp3.tls.HeldCertificate
import java.net.InetSocketAddress
import java.net.ProxySelector

fun runExample02() { 

// Create a root certificate authority.
val rootCertificate = HeldCertificate.Builder().certificateAuthority(1).rsa2048().build()
// Create an intermediate certificate authority (signed by the root certificate).
val intermediateCertificate =
  HeldCertificate.Builder().certificateAuthority(0).signedBy(rootCertificate).rsa2048().build()
// Ensure the client trusts the root certificate.
val clientCertificates =
  HandshakeCertificates.Builder().addTrustedCertificate(rootCertificate.certificate).build()
// Create and start the proxy server which uses the intermediate certificate authority to generate
// trusted certificates for the (destination of) proxy requests.
Server.create(
  // To proxy HTTPS requests the proxy server requires a CA certificate and private key.
  // This is required because the client must trust the (generated) proxy server
  // certificate to be able to decrypt and proxy the HTTPS request.
  certificatePath = intermediateCertificate.certificatePem().inFile("proxy.pem"),
  privateKeyPath = intermediateCertificate.privateKeyPkcs8Pem().inFile("proxy.key")
)
  .start(8787)
  .use {
    // Initialize an HTTPS client that uses the proxy server and trusts the root certificate.
    val client =
      OkHttpClient.Builder()
        .proxySelector(ProxySelector.of(InetSocketAddress(8787)))
        .sslSocketFactory(
          clientCertificates.sslSocketFactory(), clientCertificates.trustManager
        )
        .build()
    // Execute an HTTPS request and expect a successful response code.
    client
      .newCall(Request.Builder().url("https://httpbin.org/get").build())
      .execute()
      .use(Response::isSuccessful)
      .also(::println)
  }
}
